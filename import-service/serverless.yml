service: import-service

plugins:
  - serverless-bundle

custom:
  bundle:
    concurrency: 5
    stats: false
    generateStatsFiles: false
    esbuild: false
    disableForkTsChecker: false
    tsConfig: "./tsconfig.json"
    packager: npm
    rawFileExtensions:
      - csv
    minifyOptions:
      keepNames: true

provider:
  name: aws
  runtime: nodejs18.x
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    SQS_URL: 
      Ref: catalogItemsQueue
  stage: dev
  region: eu-west-1
  iam:
    role: AccessS3Role

functions:
  importProductFiles:
    handler: ./handlers/importProductsFile.handler
    url: true
    environment:
      REGION: eu-west-1
    events:
     - http:
         path: /import
         method: get
         cors: true
         request:
            parameters:
              querystrings:
                name: true
  importFileParser:
    handler: ./handlers/importFileParser.handler
    url: true
    environment:
      REGION: eu-west-1
    events:
     - s3:
          bucket: import-bucket-aws
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/

resources:
  Resources:
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: import-service
    AccessS3Role:
      Type: AWS::IAM::Role
      Properties:
        RoleName: AccessS3Role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: accessS3
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:TagResource
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:PutObjectAcl
                    - s3:GetObject
                    - s3:DeleteObject
                  Resource:
                    "arn:aws:s3:::import-bucket-aws/*"
                - Effect: Allow
                  Action:
                    - sqs:*
                  Resource:
                    - Fn::GetAtt:
                      - catalogItemsQueue
                      - Arn
