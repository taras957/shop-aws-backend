# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: import-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

plugins:
  - serverless-bundle
custom:
  bundle:
    concurrency: 5                  # Set desired concurrency, defaults to the number of available cores
    stats: false                    # Don't print out any Webpack output
    generateStatsFiles: false       # Creates stats files that could be used for bundle analyzing, more below
    esbuild: false                  # Use esbuild-loader instead of babel or ts for faster builds
    disableForkTsChecker: false     # Disable the ForkTsChecker plugin, more below
    tsConfig: "./tsconfig.json"       # Path to your 'tsconfig.json', if it's not in the root
    packager: npm                   # Specify a packager, 'npm' or 'yarn'. Defaults to 'npm'.
    rawFileExtensions:              # An array of file extensions to import using the Webpack raw-loader.
      - csv                         # Defaults to ['pem', 'txt']
    minifyOptions:                  # Options for ESBuildMinifyPlugin (https://esbuild.github.io/api/#simple-options)
      keepNames: true               # Disable symbol name mangling during minification




# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs18.x
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  stage: dev
  region: eu-west-1
  iam:
    role: AccessS3Role #Custom role lambdas


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  importProductFiles:
    handler: ./handlers/importProductsFile.handler
    environment:
      REGION: eu-west-1
    events:
     - http:
         path: /import
         method: get
         request:
            parameters:
              querystrings:
                name: true
  importFileParser:
    handler: ./handlers/importFileParser.handler
    environment:
      REGION: eu-west-1
    events:
     - s3:
          bucket: import-bucket-aws
          event: s3:ObjectCreated:*
          #existing: true
          rules:
            - prefix: uploaded/
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# # you can add CloudFormation resource templates here
resources:
  Resources:
    AccessS3Role:
      Type: AWS::IAM::Role
      Properties:
        RoleName: AccessS3Role # required if you want to use 'serverless deploy --function' later on
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: accessS3
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:TagResource
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                -  Effect: "Allow"
                   Action:
                    - s3:PutObject
                    - s3:PutObjectAcl
                    - s3:GetObject
                    - s3:DeleteObject
                   Resource:
                      "arn:aws:s3:::import-bucket-aws/*"
