service: product-service

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  stage: dev
  region: eu-west-1
  iam:
    role: AccessDynamoDB  #Custom role lambdas


resources:
  Resources:
    AccessDynamoDB:
      Type: AWS::IAM::Role
      Properties:
        RoleName: AccessDynamoDB 
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: accessPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:TagResource
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:DeleteItem
                  Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"
              
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Products
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: title
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: title
            KeyType: RANGE

    StockTable:
     Type: AWS::DynamoDB::Table
     Properties:
      TableName: stock
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: product_id
          AttributeType: S
      KeySchema:
        - AttributeName: product_id
          KeyType: HASH

functions:
  products:
    handler: ./handlers/getProducts.getProductsList
    environment:
      PRODUCT_TABLE_NAME: Products
      STOCK_TABLE_NAME: stock
      DB_REGION: eu-west-1
    events:
      - http:
          path: products
          method: get


  productsById:
    handler: ./handlers/productsById.getProductsById
    environment:
      PRODUCT_TABLE_NAME: Products
      STOCK_TABLE_NAME: stock
      DB_REGION: eu-west-1
    events:
      - http:
          path: products/{productId}
          method: get

  createProduct:
    handler: ./handlers/createProduct.create
    environment:
      PRODUCT_TABLE_NAME: Products
      STOCK_TABLE_NAME: stock
      DB_REGION: eu-west-1
    events:
      - http:
          path: product
          method: post
